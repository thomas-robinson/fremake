#!/usr/bin/python3
## \date 2023
## \author Tom Robinson
## \email thomas.robinson@noaa.gov
## \description fremake is used to create and run a code checkout script and compile a model.

import subprocess
import os
import yaml
from yamlfre import *
from checkout import *
from makefilefre import *
from buildDocker import *

compileYaml = "compile.yaml"
srcDir="src"
checkoutScriptName = "checkout.sh"
#os.mkdir(srcDir)
## Open the yaml file and parse as fremakeYaml
fremakeYaml = parseCompile(compileYaml)
## Check the yaml for required things
## Check for required experiment name
try:
     fremakeYaml["experiment"]
except:
     print("You must set an experiment name in the yaml")
     raise
## Check for required src
try:
     fremakeYaml["src"]
except:
     print("You must set a src in the yaml")
     raise
## Loop through the src array
for c in fremakeYaml['src']:
## Check for required componenet name
     try:
          c['component']
     except:
          print("You must set the 'componet' for each src component")
          raise
## Check for required repo url
     try:
          c['repo']
     except:
          print("You must set the'repo' for each src component")
          raise
# Check for optional branch. Otherwise set it to blank
     try:
          c['branch']
     except:
          c['branch']=""
# Check for optional cppdefs. Otherwise set it to blank
     try:
          c['cppdefs']
     except:
          c['cppdefs']=""
# Check for optional doF90Cpp. Otherwise set it to False
     try:
          c['doF90Cpp']
     except:
          c['doF90Cpp']=False
# Check for optional additional instructions. Otherwise set it to blank
     try:
          c['additionalInstructions']
     except:
          c['additionalInstructions']=""
# Check for optional paths. Otherwise set it to blank
     try:
          c['paths']
     except:
          c['paths']=[c['component']]
# Check for optional requires. Otherwise set it to blank
     try:
          c['requires']
     except:
          c['requires']=[]
## Write the checkout script
checkoutScript = checkout(checkoutScriptName)
checkoutScript.writeCheckout(fremakeYaml)
checkoutScript.finish()
## Create the Makefile
freMakefile = makefile(fremakeYaml["experiment"])
# Loop through compenents and send the component name and requires for the Makefile
for c in fremakeYaml['src']:
     freMakefile.addComponet(c['component'],c['requires'])
freMakefile.writeMakefile()
freMakefile.finish()
## Run the checkout script
image="hpc-me-intel:2021.1.1"
dockerBuild = container(image,fremakeYaml["experiment"])
dockerBuild.writeDockerfileCheckout()
for c in fremakeYaml['src']:
     dockerBuild.writeDockerfileMkmf(c)
dockerBuild.build()
#buildDockerfile(fremakeYaml,image)
quit()
os.system("podman build -f Dockerfile -t "+fremakeYaml["experiment"]+":latest")
#try:
#     subprocess.run(args=["./"+checkoutScriptName], check=True)
#except:
#     print("There was an error with the checkout script "+checkoutScriptName)
#     raise
