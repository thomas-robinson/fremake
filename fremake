#!/usr/bin/python3
## \date 2023
## \author Tom Robinson
## \email thomas.robinson@noaa.gov
## \description fremake is used to create and run a code checkout script and compile a model.

import subprocess
import os
import yaml
import argparse
import logging
from yamlfre import *
from platform import *
from checkoutContainer import *
from makefilefre import *
from buildDocker import *
from buildBaremetal import *

## Add in cli options
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Fremake is used to create a code checkout script to compile models for FRE experiments.')
    parser.add_argument("-y",
                        "--yamlfile",
                        type=str, help="Experiment yaml compile FILE",required=True)
    parser.add_argument("-p",
                        "--platform",
                        nargs='*',
                        type=str, help="Hardware and software FRE platform space separated list of STRING(s). This sets platform-specific data and instructions",required=True)
    parser.add_argument("-t",
                        "--target",
                        nargs='*',
                        type=str, help="FRE target space separated list of STRING(s) that defines compilation settings and linkage directives for experiments.\n\nPredefined targets refer to groups of directives that exist in the mkmf template file 				(referenced in buildDocker.py). Possible predefined targets include 'prod', 'openmp', 'repro', 'debug, 'hdf5'; however 'prod', 'repro', and 'debug' are mutually exclusive (cannot not 				   use more than one of these in the target list). Any number of targets can be used.",required=True)
    parser.add_argument("-f", 
                        "--force-checkout",
                        action="store_true",
                        help="Force checkout to get a fresh checkout to source directory in case the source directory exists")
    parser.add_argument("-F",
                        "--force-compile",
                        action="store_true",
                        help="Force compile to compile a fresh executable in case the executable directory exists")
    parser.add_argument("-K",
                        "--keep-compiled",
                        action="store_true",
                        help="Keep compiled files in the executable directory for future use")
    parser.add_argument("--no-link",
                        action="store_true",
                        help="Do not link the executable")
    parser.add_argument("-E", 
                        "--execute",
                        action="store_true",
                        help="Execute all the created scripts in the current session")
    parser.add_argument("-n NUM", 
                        "--ncores=NUM",
                        type=int, 
                        metavar='', default=1,
                        help="Number of processor cores to use for concurrent make jobs. The number of make jobs is the number of cores/tasks requested (default 1)")
    parser.add_argument("-s",
                        "--submit",
                        action="store_true",
                        help="Submit all the created scripts as batch jobs")
    parser.add_argument("-v", 
                        "--verbose",
                        action="store_true",
                        help="Get verbose messages (repeat the option to increase verbosity level)")
    parser.add_argument("-w NUM", 
                        "--walltime=NUM",
                        type=int, metavar='',
                        help="Maximum wall time NUM (in minutes) to use")
    parser.add_argument("--mail-list=STRING",
                        action="store_true",
                        help="Email the comma=separated STRING list of emails rather than \$USER\@noaa.gov")

    ## Parse the arguments
    args = parser.parse_args()

    ## Define arguments as variables
    yml = args.yamlfile
    ps = args.platform
    ts = args.target
  
    ## Define operation of option(s) above
    if args.verbose:
      logging.basicCOnfig(level=logging.INFO)
    else:
      logging.basicConfig(level=logging.ERROR)

#### Main
compileYaml = yml
platformsYaml = "yamls/platforms.yaml"
srcDir="src"
checkoutScriptName = "checkout.sh"
## Store the platforms and targets in a list
plist = args.platform
tlist = args.target
## Open the yaml file and parse as fremakeYaml
freYaml = freyaml(yml)
#fremakeCheckCompileYaml = parseCompile(compileYaml)
#platYaml = parseCompile(platformsYaml)
#fremakeYaml.update(pyaml)
fremakeYaml = freYaml.getCompileYaml()

## Parse the platforms
#platforms = platforms(platformsYaml)
## loop through the platforms specified on the command line
for platformName in plist:
     if freYaml.platforms.hasPlatform(platformName):
          print ("Compiling for platform " + platformName)
     else:
          raise SystemExit (platformName + " does not exist in " + freYaml.platformsfile)
     (compiler,modules,modulesInit,fc,cc,modelRoot,iscontainer,mkTemplate,containerBuild,ContainerRun)=freYaml.platforms.getPlatformFromName(platformName)
## Create the source directory for the platform
     os.system("mkdir -p " + modelRoot + "/src")
     os.system("mkdir -p " + modelRoot + "/exec")
     ## Check for type of build
     if iscontainer == "":
          ## Create the checkout script
          freCheckout = checkout("checkout.sh",modelRoot+"/src")
          freCheckout.writeCheckout(freYaml.compile.getCompileYaml())
          freCheckout.finish()
          ## Create the Makefile
          freMakefile = makefile(fremakeYaml["experiment"],modelRoot,mkTemplate)
          # Loop through compenents and send the component name and requires for the Makefile
          for c in fremakeYaml['src']:
               freMakefile.addComponet(c['component'],c['requires'])
          freMakefile.writeMakefile()
          freMakefile.finish()

          ## Create the build
          fremakeBuild = buildBaremetal(fremakeYaml["experiment"],mkTemplate,modelRoot,modules,modulesInit)
          for c in fremakeYaml['src']:
               fremakeBuild.writeBuildComponents(c)
          fremakeBuild.writeScript()

          ## Run the checkout and the build
          freCheckout.run()
          fremakeBuild.run()
     else:
#################################### container stuff below ###########################################################
          ## Run the checkout script
          image="hpc-me-intel:2021.1.1"
          freCheckout = checkoutContainer(compileYaml,".")
          freCheckout.writeCheckout()
          #Get the yaml filled out
          fremakeYaml = freCheckout.getYaml()
          dockerBuild = container(image,fremakeYaml["experiment"])
          dockerBuild.writeDockerfileCheckout()
          for c in fremakeYaml['src']:
               dockerBuild.writeDockerfileMkmf(c)
          dockerBuild.build()
          #buildDockerfile(fremakeYaml,image)
          os.system("podman build -f Dockerfile -t "+fremakeYaml["experiment"]+":latest")
