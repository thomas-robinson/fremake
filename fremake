#!/usr/bin/python3
## \date 2023
## \author Tom Robinson
## \email thomas.robinson@noaa.gov
## \description fremake is used to create and run a code checkout script and compile a model.

import subprocess
import os
import yaml
from yamlfre import *
from platform import *
from checkoutContainer import *
from makefilefre import *
from buildDocker import *
from buildBaremetal import *

compileYaml = "yamls/compile.yaml"
platformsYaml = "yamls/platforms.yaml"
srcDir="src"
checkoutScriptName = "checkout.sh"
#os.mkdir(srcDir)
## Open the yaml file and parse as fremakeYaml
fremakeCheckCompileYaml = parseCompile(compileYaml)
platYaml = parseCompile(platformsYaml)
#fremakeYaml.update(pyaml)

## Parse the platforms
platforms = platforms(platformsYaml)
(compiler,modules,modulesInit,fc,cc,buildRoot,container,mkTemplate,containerBuild,ContainerRun)=platforms.getPlatformFromName("ncrc4.intel")
## Check for type of build
if container == "":
     ## Create the checkout script
     freCheckout = checkoutContainer(compileYaml,buildRoot)
     freCheckout.writeCheckout()
     #Get the yaml filled out
     fremakeYaml = freCheckout.getYaml()

     ## Create the Makefile
     freMakefile = makefile(fremakeYaml["experiment"],buildRoot,mkTemplate)
     # Loop through compenents and send the component name and requires for the Makefile
     for c in fremakeYaml['src']:
          freMakefile.addComponet(c['component'],c['requires'])
     freMakefile.writeMakefile()
     freMakefile.finish()

     ## Create the build
     fremakeBuild = buildBaremetal(fremakeYaml["experiment"],mkTemplate,buildRoot,modules,modulesInit)
     for c in fremakeYaml['src']:
          fremakeBuild.writeBuildComponents(c)
     fremakeBuild.writeScript()

     ## Run the checkout and the build
     freCheckout.run()
     fremakeBuild.run()

quit()
#################################### container stuff below ###########################################################
## Run the checkout script
image="hpc-me-intel:2021.1.1"
dockerBuild = container(image,fremakeYaml["experiment"])
dockerBuild.writeDockerfileCheckout()
for c in fremakeYaml['src']:
     dockerBuild.writeDockerfileMkmf(c)
dockerBuild.build()
#buildDockerfile(fremakeYaml,image)
quit()
os.system("podman build -f Dockerfile -t "+fremakeYaml["experiment"]+":latest")
#try:
#     subprocess.run(args=["./"+checkoutScriptName], check=True)
#except:
#     print("There was an error with the checkout script "+checkoutScriptName)
#     raise
